* EM4R Operational Guide
** Inner Workings/Components
*** Core Parts
**** Control Board
     The first of the arduinos in the system.
     is responsible for relaying information between
     human interfaces and the driver control board.
     Utilizes an ethernet adapter board, fitted with an SD card slot.
**** Driver control board
     The second arduino in the system.
     Has the sole job of sending control information to the stepper
     drivers (STP-DRV-6575 from SureStep), due to the high speeds required in order to ensure that there are no skipped
     steps.
**** Hand-Control
     A wired controller that a user can utilize to manually jog
     the operators.
**** Control Server
     This is the "linux box," whose purpose is to act as a "gateway" for user input and information output.
     Past setups used a prebuilt industrial computer running an Ubuntu distrobution, but any linux device with
     at least one ethernet interface will do. Controls are given using command line, so SSH access is necessary unless
     connected to HID/display devices.
**** Operators
***** Pitch/Roll
      Stepper motors that drive the pitch and
      roll mechanisms. Driven by STP-DRV-6576 stepper drivers, controlled
      by the Driver control board. Has limits based on simple limit switches,
      several magnetic encoders, and tilt/gyro sensors.
***** Flow
      Shurflow pump, driven by a Critical Velocity SPD315 PWM driver, 
      Controlled by the main Control Board.
      Flow will later be measured by a FM3001-PP Mag-meter by omega engineering
***** Pipe
      Stepper motor, driven by stepper drivers, controlled by driver control
      board. Has limits based off of simple limit switch (I.E. no encoding)
*** Code/Logic/Pin-outs
    NOTE: code is written using the PIMPL (Pointer to Implementation)
    guidelines.
**** Control Board
    The control board is the heart of the system, responsible for timekeeping,
    command translation, and general IO.
***** Pins
****** RX2 and TX2 (pins 19 and 18) connect boards together. RX1 and TX1 (pins 17 and 16) are FTDI debug ports

****** I2C Expander (for megnatic encoders) is connected to pins 20 and 21 (SDA and SCL)
**** Driver Control Board
    The driver control boards only task is to relay info from the control board to the stepper drivers
    in a timely and loss free manner. The loop() function checks every 250usec (microseconds)
    whether or not it has any commands in its buffer, then acts on those commands. After relaying the info, it
    waits until 250usec has been achieved before it starts its next loop. This is done in order to keep steps in sync
    and eliminate skipped steps.
***** Communication functions
      The driver control board recieves commands and sends status updates        
      over its built in serial interface.
      Status updates include the operator in question, the current position it is in
      (in relation to the relevant value. degrees of pitch, millis/sec of flow, etc.).
***** Driver functions
      The driver board handles two types of controllers; "steppers" and "speeders"
      Steppers are, as the name suggests, stepper drivers. These boards take two different
      parameters; position and speed. the "speeder" in this project is the critical velocity pump driver,
      which only takes one parameter; speed (PWM).
***** Pins
****** Pitch
       - EN = 22
       - DIR = 23
       - STEP = 24
       - FAULT = 25
       - MIN_LIM = 26 
       - MAX_LIM = 27
****** Roll
       - EN = 28
       - DIR = 29
       - STEP = 30
       - FAULT = 31
       - MIN_LIM = 32
       - MAX_LIM = 33
****** Pipe
       - EN = 34
       - DIR = 35
       - STEP = 36
       - FAULT = 37
       - MIN_LIM = 38
       - MAX_LIM = 39
****** Pump
       - EN = 2
       - PWM = 3 
****** Jog Controller         
       - Roll/Pump+ = 42
       - Roll/Pump- = 43
       - Pitch/Pipe+ = 41
       - Pitch/Pipe- = 40
       - JogSwitch = 44
       - GND = 46
 
      


*** Operational flow (walkthrough of operations)
**** Foreword
     It's hard to capture all of the modes of operation in this walkthrough, so I will
     Be focusing on just simple move commands, issued via command line. The important 
     thing to keep in mind is that everything outside of the main control board
     is a user interface (whether it be command line, controller, etc.). Once the command
     hits the control board, the operations are the same. The parentheses after headings denotes the relevant code found in the github repo.
***** Command line to Control Board (em4r-command)
      A command is issued to the control board from the control server. The control
      server is called with '$em4r jog pitch 25 10'
      The control server first initializes a connection to the control board over the
      ethernet connection. If this is successful, it determines what mode to run in.
      These options include the script function, home function, jog function, and various
      debugging functions. In this example we are using jog 
      (the first argument passed to em4r)

      The next parameter (after 'jog') is the operator that it to be modified/moved.
      In this example, that operator is pitch. In the code, these operators are simple
      integers, 0-3.

      After the operator parameter, there are two more options; the value to jog to, and 
      the time in which the operator should achieve that value. In our
      example above, this is 25 degrees (positive pitch) over the course of 10 seconds.

      The communication over the ethernet is a custom protocol, made by Chris Alix
      for the project (described in udpserver.cpp) 
      In a basic sense, it takes those three parameters mentioned above (operator, value, and time)
      and packages them in packets in such a way that preserves packet integrity
      (some fancy "magic number" related functions, that ensure packets all come out the same
      they went in, size and all).

***** Control Board to Driver board (em4r-hardware/em4rctrl)
       One of the first things that the control board takes care of is the mapping of values between steps and measurements.
       The user sends what I will refer to as "real" values, that is relatable to real life changes (eg. degrees, millimeters, milliliters/sec).
       These values must first be converted into step values, or values that pertain to stepper motors. This is done by using built in tables that were written through experimentation and measurement.
       At the same time, the control board also services the encoders using a similar system. The pitch/roll encoders output voltages from ~0-3V that are transnslated into hundreths of a degree using a simple min/max table
       that is linearally extrapolated to account for the values in between. The other operators are translated in a similar vein, with minimum and maximum values corresponding to the steps/PWM required to hit those values.
       There is some skeleton code for reading a magnetic flow meter, but it is yet unfinished, and may be replaced by a mag-meter/paddle-wheel hybrid.

***** Driver Board to Steppers
       The driver board is the workhorse of the system, handling everything to do with the measurement and movement of the stepper motors.
       The driver board is constantly monitoring both the linear encoders, min/max limit switches, and the fault lines coming from the steppers. If any of these are outside their limits, the driver board ceases sending step commands
       to the individual stepper driver in question.

       Instead of just servicing the drivers whenever it receives commands, the driver board is actually always looping through a routine of checking for faults in the steppers, checking for changes, and sending said changes.
       This is done on a 250 usec loop, in order to avoid missed steps and fault the motors. If a change in position command is given over serial, the driver board first enables the motor, checks to see if the movement is going
       clockwise or counterclockwise, and passes along the desired value. Once That is determined, the min/max limits for movement are recorded, to ensure that the magnetic encoders stay within those bounds. The amount of steps required to
       reach the desired value is calculated (based on a table), and those steps are sent off to the individual driver boards. 
         
** Potential Changes/Bugfixes
*** Hardware
**** Raspberry Pi control server
     The control server in the past has been the orange linux box that we have in-house,
     which was handy while it was also the development environment as well as the server,
     but still overpowered for the task. A raspberry pi has served just fine as a server, and can be accessed over wifi
     (with the right credentials, of course. It isn't open to the internet either, just local connections)
     This allows for a lot more options when it comes to human input, cuts down on the cost of the server, and
     might even be able to replace the arduino control board that issues commands to the driver control board.
     
     Another option mght be something like the ODroid-XU4, a single-board computer capable of octa-core processing
     as well as the same basic capabilities that the Pi has as a single board computer. This board could replace ALL
     of the control hardware, being able to recieve commands over the network, control PWM signals over its built in pins,
     and handle stepper functionality (due to its multi-core processor). It could also lend itself to better floating point calculations, which could eliminate the need for calibration tables to translate encoder
     values to pitch/roll degrees, using formulae instead.  
*** Software      
**** Encoder/Stepper translation
     Due to the deadlines for the EM4R, the code written for translating real values to/from stepper/encoder values was done via lookup tables.
     This is a solution, albeit not the best one, since there are so many values possible (technically). In the future, we should try to do these translations algorithmically, so long as the
     control board has the processing power to do so.
* Questions for Chris
** Why random ports for UDP traffic? 
   Why not have a set port for communication? It seems like the port is always changing, for no apparent reason. perhaps just a quick fix, or for expand-ability? 
